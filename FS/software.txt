
第一章  概论
1: 软件危机是什么？
（1）开发人员开发的软件产品不能完全满足用户的需求。（2）软件产品的质量难以得到保证。（3）软件产品的开发周期、开发经费和维护费用很难被准确估计。（4）软件产品不能灵活的适应环境的改变 （5）软件文档不完备
软件工程的提出就是为了解决软件危机所带来的各种弊端。

2: 软件工程三要素
（1）过程：软件生命周期内为实现特定目标而进行的一系列相关活动。
（2）方法：常用的有面向过程的开发方法，面向对象的开发方法，面向数据的开发方法和形式化方法。
（3）工具：为软件工程方法提供了自动的或半自动的软件支撑环境。

3: 软件工程的目标和原则
基本目标包括：（1）达到要求的软件功能 （2）取得较好的软件性能 （3）开发出高质量的软件 （4）付出较低的开发成本 （5）需要较低的维护费用 （6）能按时完成开发工作，及时交付使用。
基本原则：（1）用分阶段的生命周期计划进行严格的管理 （2）坚持进行阶段评审 (3)实行严格的产品控制 （4）采用现代程序设计技术 （5）软件工程结果应能清楚地审查 （6）开发小组的人员应该少而精 （7）承认不断改进软件工程实践的必要性

4: 软件和程序
答：软件，是与计算机系统操作有关的计算机程序、规则、文档及数据等的集合体。

5: 软件工程定义及特征
答：软件工程是指导计算机软件开发和维护的一门工程学科，该学科的目的是生产出能按期交付的、在预算范围内的、满足用户需求的、质量合格的软件产品。

6: 传统方法学和面向对象方法学定义？
答: 传统方法学也称为生命周期方法学或结构化范型。这种方法学把软件生命周期划分成若干个阶段，然后顺序地完成每个阶段的任务。
面向对象方法学是一种以数据为主线，把数据和对数据的操作紧密地结合起来。把对象作为融合数据和操作的软件构件；把所有对象划分成类；按照父类与子类的关系，把若干相关类组成一个层次结构的系统；对象之间彼此只能通过消息相互联系。总结：面向对象方法 ＝ 对象＋类＋继承＋消息通信

7: 软件的生命周期
答：软件的生命周期是指，软件从构想到被淘汰的过程。一般经历：可行性研究、需求分析、软件设计、编码和单元测试、软件测试和软件维护。

8: 典型的软件过程模型有瀑布模型、快速原型模型、增量模型、螺旋模型、喷泉模型。

9: 经典的几个软件开发过程
答：1，Rational 统一过程。2，敏捷过程与极限编程。3，微软过程。
RUP强调采用迭代和渐增的方式开发软件，整个项目开发由多个迭代过程组成，每个迭代过程只考虑系统的一部分需求。
极限编程广泛应用于需求模糊且经常改变的场合。客户作为开发团队成员、短交付周期、结对编程、测试驱动开发等要求。


第二章  可行性研究
1: 可行性研究包含：技术可行性；经济可行性；操作可行性。

第三章  需求分析
1: 需求分析是什么？
需求分析是在可行性研究的基础上，将用户对系统的描述，通过开发人员的分析概括，抽象为完整的需求定义，再形成一系列文档的过程。可行性研究旨在评估目标系统是否值得去开发，问题是否能够解决，而需求分析旨在回答“系统做什么”的问题，确保将来开发出来的软件产品能够真正满足用户的需要。

2: 需求分析的步骤
需求分析的步骤为（1）获取需求，识别问题 （2）分析需求，建立目标系统的逻辑模型 （3）将需求文档化 （4）需求验证
获取需求是需求分析的基础，常用的需求分析的方法有问卷调查、访谈、实际操作、建立原型和研究资料等。
获得需求之后，开发人员应对问题进行分析，并在此基础上从高层建立目标系统的逻辑模型。
软件规格说明书是常用的需求阶段的输出文档，它主要描述软件部分的需求。
需求验证是对需求分析的的成果进行评估和验证的过程。

3: 面向对象需求分析
面向对象需求分析方法主要基于面向对象 的方法，以用例模型为基础进行需求分析。所谓用例就是指系统中的一个功能分元，可以描述为操作者与系统之间的一种交互。面向对象的分析就是用对象模型、动态模型和功能模型描述对象及其相互关系。

4: ER图由哪三部分组成？
答：实体、关系、属性。

第四章  形式化说明技术
1: 有穷状态机。当前状态＋事件＋谓词(逻辑条件) => 下个状态

2: 有穷状态机由5部分组成，有穷的的非空状态集J；有穷的非空输入集K；由当前状态和当前输入确定下一个状态的转换函数T；初始态S；终态机F。

第五、六章  结构化设计
1: 软件设计的原则
   （1）模块化：把系统或程序划分为独立命名并且可以独立访问的模块，每个模块完成一个特定的子功能。这些模块集成起来就构成一个整体，完成特定的功能，进而满足用户需求。模块规模适中，高内聚低耦合，加强模块保护性。
   （2）抽象化：主要为了降低问题的复杂度，以得到问题领域中较简单的概念。
   （3）逐步求精：抽象的逆过程，暂时忽略非本质细节，集中精力解决主要问题。
   （4）信息隐藏：与模块化概念相关，一些模块的具体实现细节对其它不相关模块是不可见的，信息隐藏提高了模块的独立性。

2: 人机界面交互应该考虑的设计问题
答：1，系统响应时间；2，用户帮助设施；3，出错信息处理；4，提供命令交互功能

3: 软件系统的设计模式
 所谓模式就是指解决某一类似问题的方法论。常用的设计模式分为三种类型，即创建型模式，结构型模式，行为型模式。总共有23种设计模式，比如工厂模式，抽象工厂模式；适配器模式，桥接模式；命令模式，解释器模式，迭代器模式，状态机模式。

4: 软件设计的两个阶段
软件设计是软件开发中处于核心地位，一般分为概要设计和详细设计两个阶段。概要设计也称为总体设计，它以需求规格说明书为基础，概要地说明软件系统的实现方案。详细设计也称为过程设计，它对每个模块的功能和架构进行细化，明确要完成该模块的预定功能需要的数据结构和算法，并将其用某种形式描述出来。

第七章  实现
1: 提高编码效率的途径有哪些？
答：1，提升程序的运行效率；2，提升存储器效率；3，提升输入输出效率

2: 软件测试的目的是暴露出程序中的错误。

3: 黑盒测试和白盒测试区别？
答：黑盒测试是不考虑程序内部结构和处理过程，只检查程序功能是否能按照规格说明书的规定正常使用，是否能适当地接受输入并产生正确的输出。黑盒测试又称为功能测试。
白盒测试前提是测试者完全知道程序的结构和处理算法。按照程序的内部逻辑测试程序。白盒测试又称为结构测试。
灰盒测试：灰盒测试是介于白盒测试和黑盒测试之间的测试方法，它关注输出对于输入的正确性，同时也关注内部表现，但不像白盒测试那样详细、完整。灰盒测试结合了白盒测试和黑盒测试的要素，考虑了用户端，特定的系统知识和操作环境。可以认为集成测试就是一类灰盒测试。

4: 软件测试步骤是什么？
答： 与开发过程类似，测试过程也必须分步骤进行，后一个步骤在逻辑上是前一个步骤的继续。
最开始，着重测试每个单独的模块，以确保它作为一个单元来说功能是正确的，这种测试称为单元测试。接下来，必须把模块装配在一起形成完整的软件包，在装配的同时进行测试，因此称为集成测试。在软件完成集成后，还需要进行一系列的高级测试。必须测试在需求分析阶段确定下来的确认标准，确认测试是对软件满足所有功能的、行为的和性能需求的最终保证。在确认过程中仅使用黑盒测试。

5: 单元测试的测试重点：
答：1，模块接口；2，局部数据结构；3，重要的执行通路；4，出错处理通路；5，边界条件

6: 集成测试可以采用自顶向下和自底向上集成两种方式。其中自顶向下需要使用存根程序。

7: 什么是回归测试？
答：回归测试指软件系统被修改或扩充后重新进行的测试，回归测试是为了保证对软件修改后，没有引入新的错误而重复进行的测试。每当软件增加了新的功能，或软件中的缺陷被修正，这些变更都可能影响软件原来的结构和功能。为了防止软件变更产生的无法预料的副作用，不仅要对内容进行测试，还要重复进行过去已经进行的测试，以证明修改没有引起未曾预料的后果。

8: 什么是bug？ 
答：执行一个测试用例，评估测试结果，发现实际结果与预期结果不一致，则这种不一致就是一个BUG，表明软件存在隐藏的问题。

第八章  维护
1: 软件维护过程。1，维护组织；2，维护报告；3，维护的事件流；4，保存维护记录；5，评价维护活动

2: 软件文档应该满足哪些要求？
答：1，必须描述如何使用该系统；2，必须描述怎样安装和管理该系统；3，必须描述系统需求和设计；4，必须描述系统的实现和测试

3: 用户文档应该满足哪些要求？
答：1，功能描述；2，安装文档；3，使用手册；4，参考手册；5，操作员指南

4: 软件再工程过程
1，库存目录分析；2，文档重构；3，逆向工程；4，代码重构；5，数据重构；6，正向工程

第九章  面向对象方法学(重点)
1: 什么是面向对象？
答：(1)，认为客观世界由各种对象构成，任何事物都是对象，复杂的对象由简单的对象组合而成；
(2)，所有的对象都划分成若干的类，按照子类、父类的关系组成一个复杂的层次结构系统；
(3)，对象彼此之间只能通过传递消息相联系；
(4)，一切局部于该对象的私有信息，都被封装在该对象类的定义中，外界看不到。体现了“封装性”。
总之，面向对象方法＝对象＋类＋继承＋传递消息的方法

2: 面向对象方法的优点有哪些？
答：1，与人类习惯的思维方式一致；2，稳定性好；3，可重用性好；4，较易开发大型软件产品；5，可维护性好

3: 面向对象中的一些重要概念
(1)类：是对具有相同数据和相同操作的一组相似对象的定义。
(2)实例：是某个特定的类所描述的一个具体的对象。
(3)消息：要求某个对象的实例执行在定义它的那个类中所定义的某个操作的规格说明。由接收消息对象、消息名、变量组成。
(4)方法：函数体，对象执行操作的算法。
(5)属性：类中所定义的数据，对客观世界实体所具有的性质的抽象。
(6)封装：三要素：有一个清晰的边界，私有的属性和方法装在边界里面、有确定的接口、受保护的内部实现，外界无法访问
(7)继承：指子类自动的继承父类中的属性和方法的机制。
(8)多态：在类等级不同的层次中同名方法可以有不同的实现，当对象收到消息时，可以根据该对象所属于的类动态选用在该类中定义的实现算法。

4: 什么是UML图？作用是什么？
答：Unified Modeling Language 统一建模语言。是一种标准的图形化建模语言。它主要用于软件的分析与设计，用定义完善的符号来图形化地展现一个软件系统。UML的使用可以贯穿于软件开发周期的每一个阶段，适用于数据建模，业务建模，对象建模和组件建模。作为一种建模语言，UML并不涉及编程的问题，即与语言平台无关，这就使开发人员可以专注于建立软件系统的模型和结构。它使问题表述标准化，有效地促进了软件开发团队内部各种角色人员之间的交流，提高了软件开发的效率。
UML图有用例图，类图，对象图，状态图，顺序图，活动图，协作图，构建图，部署图9种。（例类对状，顺活协构部）

5: 类图三要素：类名、属性、服务(方法及参数)

6: 表示类与类之间关系的符号有哪些？
答：1，关联，两个类的对象之间存在某种语义上的联系；2，聚集，表示类与类之间的关系是整体和部分的关系；3，泛化，通常表示继承关系；4，依赖和细化，其中依赖表示一个模型元素是独立的，但是另一个模型元素依赖于独立的模型元素，称为依赖关系。细化，和字面意义相同略。

7: 什么是用例图？用例图有什么作用？
答：通常一个用例图描述的是外部行为者所理解的系统功能。包含的模型元素有：系统、行为者、用例(系统完成的一系列动作)以及依赖之间的关系(扩展、使用等)。使用用例图代替传统的功能说明，往往能够更好的获取用户需求，可以更好的回答系统应该为每个用户做什么。

8: 面向对象建模技术的三种模型以及之间的关系
答：对象模型定义了做事情的实体(类)、功能模型指明了系统应该做什么、动态模型明确规定了什么时候做(即在何种状态下接受什么事件的触发)

第十章  面向对象分析
1: 面向对象分析，就是抽取和整理用户需求并建立问题域精确模型的过程。分为以下几个步骤：
（1）分析用户需求陈述，该需求往往不严谨、不完整是非正式的，需要进一步分析补充。
（2）深入理解用户需求，抽象出目标系统的本质属性，并用模型准确的表示出来。
（3）建模过程分为五个层次：找出类与对象、识别结构、识别主题、定义属性、定义服务

2: 如何确定类与对象？
答：对象是对问题域中所有有意义的事物的抽象，既可以是物理实体，也可能是抽象概念。一种简单的方法是，将需求陈述中的所有的有意义的名词作为一个对象候选、动词作为服务(操作)候选、形容词作为属性候选，然后进一步逐一排查，筛选出最终合适的类与对象。

第十一章  面向对象设计
1: 面向对象设计准则有哪些？
答：模块化、抽象、信息隐藏、弱藕合、强内聚、可重用

2: 和结构化设计相比面向对象设计有哪些特点？
答：与结构化软件设计方法相比，面向对象软件设计方法的使用范围更广。面向对象的方法不需要强调需求分析和软件设计的严格区分。从分析到设计的过渡，是一个逐渐扩充、细化和完善分析阶段所得到的各种模型的过程。面向对象的设计可以分为系统设计和对象设计两个阶段。系统设计关注于确定实现系统的策略和目标系统的高层结构，而对象设计是对需求分析阶段得到的对象模型的进一步完善、细化和扩充。

4: 大多数软件系统在逻辑上都可以分4个子系统：问题域子系统、人机交互子系统、任务管理子系统、数据管理子系统。

5: 如何设计出比较完善的人机交互子系统？
答：1，将用户分类，观察用户怎么使用系统进行工作，必要时可以深入到用户的使用现场。2，记录将来使用该系统的用户的情况。3，研究现有的人机交互准则，并考虑进一步完善，切记盲目修改。

6: 三种数据管理子系统的优缺点？
答：1，文件管理系统，简单，成本低，但是文件系统级别低，为提供适当的抽象还需要些额外的代码，而且各系统间的兼容性差。2，关系数据库管理系统，理论坚实，功能强大，兼容性好，标准化的语言。但是运行开销大，与程序设计语言的连接不自然(SQL面向集合，程序设计语言面向过程)。3，面向对象数据库管理系统，是对关系数据库管理系统的扩展，支持对象持久化。


第十二章  面向对象实现
1: 如何提高代码可重用性？
答：提高方法内聚(一个方法只干一件事儿)、减小方法规模、保持方法的一致性、把策略方法和实现方法分开、全面覆盖、尽量不使用全局信息、利用继承机制

2: 低级语言与高级语言
一般来说，低级语言是面向过程的语言，比如机器语言，汇编语言，特点是执行速度快，但是对程序员要求较高，直观性差，容易出错。一些高级语言是面向过程的，如FORTRAN、BASIC，C语言，它们使用结构化的数据结构，控制结构，过程抽象等概念体现客观事物的结构和逻辑含义。一些语言是面向对象的，以C++语言为典型代表，这类语言将客观事物看成是具有属性和行为的对象并通过抽象把一组具有相似属性和行为的对象抽象为类。不同的类之间还可以通过继承、多态等机制实现代码的复用。


















































































