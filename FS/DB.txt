
第一章  绪论
1: 什么是数据？什么是数据库？什么是数据库管理系统？
答：数据是描述事物的符号记录，这些符号可以是数字、文字、图片、语音等；
数据库是长期存储在计算机内、有组织的、可共享的大量数据的集合。具有永久存储、有组织、可共享三个基本特点；
数据库管理系统是位于用户和操作系统之间，为建立和使用维护数据库而配置的一层数据库管理软件。

2: 数据库管理系统主要功能？
答：1，数据定义（提供数据定义语言，定义数据库中的数据对象）；2，数据组织、存储和管理；3，数据操纵（提供数据操纵语言）；4，数据库事务管理和运行管理；5，数据库建立和维护（数据库转储、故障恢复等）

3: 数据库系统是什么？
答：是指在计算机中引入数据库后的系统，一般有数据库、数据库管理系统、应用系统、数据库管理员组成。

4: 两类数据模型：第一类概念模型，第二类逻辑模型或物理模型。
数据模型组成要素：数据结构、数据操作和完整性约束
常用的逻辑模型：1，层次模型；2，网状模型；3，关系模型；4，面向对象模型；5，对象关系模型。

5: 数据库系统的三级模式结构：外模式、模式和内模式。内模式也称存储模式，一个数据库只有一个，是数据物理结构的描述；模式也只有一个是数据库中全体数据的逻辑结构的描述(有哪几张表、有哪些数据类型、表中有哪些字段、是否支持NULL等)；外模式面向用户程序，是数据库用户的数据视图。


第二章  
1: 什么是关系型数据库？
答：支持关系模型的数据库系统。是一个给定的应用领域中，所有实体和实体间关系的集合构成一个关系数据库。

2: 什么是关系？
答：关系是一组域的笛卡尔积的一个子集。是一个二维表，表的一行对应一个元组，表的一列对应一个域，为了加以区分每个列起个名字叫属性。
关系中的某一个属性组的值可以唯一标识一个元组，则称为候选码。候选码的诸属性称为主属性，其他的为非主属性。可以选定其中一个主属性为主码。

3: 关系完整性包含哪几种？
答：实体完整性(主码非空)、参照完整性(外码为空或者真实存在)、用户定义完整性(定义某个属性非空且唯一)

4: 关系代数语言分为：关系代数、关系演算、SQL 三种。

5: 关系运算包含：选择、投影、连接、除运算

6: 投影运算是选择出若干个属性列组成新的关系，投影操作是从列的角度运算。

7: 连接(JOIN)分为：等值连接、非等值连接(也叫内连接)、自然连接、外连接。连接运算的结果是两组域的广义笛卡尔积德子集。

8: 如果舍弃的元组也保存在其中，空闲地方补NULL，则称为外连接(OUTER JOIN); 如果只把左边关系要舍弃的保留，其余补NULL则称为左连接(LEFT JOIN)；反之右连接(RIGHT JOIN)。

9: 除运算建立在象集运算的基础上。并且两组关系之间存在公共列。

10: UPDATE 语句原理：1，先用HOLD语句读出要修改的元组 W；2，使用宿主语言对 W 进行修改；3，把修改后的 W 送回原数据中。


第三章  关系数据库标准语言 SQL(重点)
1: SQL 特点。
1，综合统一（集数据查询、操纵、定义、控制于一体）；2，高度非过程化；
3，面向集合的操作方式；4，以同一种语法结构提供多种使用方式；5，语言简洁，易学易用。

2: 模式与表的关系：每个表都属于某个模式，一个模式包含若干个表。通俗地讲，模式是若干个表以及表的属性及操作的集合(索引、视图等)。

3: 索引有什么作用？
答：索引能有效减少查询数据的时间，但是会增加一部分增删改的时间开销。索引是数据库内部实现技术，属于内模式的范畴。

4: 查询语句有哪些条件：比大小、(NOT)BETWEEN AND、(NOT)IN('','','')、(NOT)LIKE('刘%')(李_)、AND 优先级高于 OR、ORDER BY、聚集函数(COUNT、SUM、MAX、MIN、AVG)、GROUP BY、HAVING。其中 HAVING 可以对GROUP BY 进行筛选，例如HAVING COUNT(*) > 3	
注意当查询的字符串本身含有_或％，则需要 ESCAPE 换码，例：LIKE 'DB\_Design' ESCAPE '\'

5: 连接查询包含：等值连接、自然连接、非等值连接、自身连接、外连接、复合条件连接等

6: EXISTS 和 NOT EXISTS 可以等价的表示全称量词，例：查询至少选择了，某学生所选择的全部课程，的学生号码。当使用 EXISTS() 时，只要()中有一个符合条件则代表true;当使用 NOT EXISTS()时，只有括()中的查询为空时才代表 true，但凡()中有任何一个符合符合条件 NOT EXISTS 都代表 false。

7: 集合查询语句：UNION（并集），INTERSECT（交集），EXCEPT（差集）

8: 什么是视图，视图有哪些作用？
答：视图是从一个基本表导出的表，是一个虚表，表中是有视图的定义，实际的数据还是存放在基本表中。作用如下：
(1): 简化用户操作，用户可以将注意力只放在关心的数据上，使数据库看起来结构简单、清晰。
(2): 使用户能够以多种角度看待同一数据库
(3): 在一定程度上提供了重构数据库的逻辑独立性
(4): 对机密数据提供安全保护。对不同的用户定义不同的视图。
(5): 适当利用视图可以更清晰的表达查询。


第四章  数据库安全性
1: 定义：数据库的安全性是指保护数据库以防止不合法的使用所造成的数据泄露、更改或破坏。

2: 数据库安全性控制的方法：用户标识和鉴定、存取控制、视图、密码存储。

3: 用户标识和鉴定是操作系统提供的最外层安全保护措施；存取控制机制包含定义用户权限、合法权限检查两部分，主要有DAC(Discretionary Access Control)和MAC(Mandatory Access Control)两种方法，大多数DBMS都支持DAC。

4: DAC 方法主要通过 GRANT 和 REVOKE 语句对用户操作数据的权限，进行授予和回收；除此之外，DBA超级用户拥有创建新用户的权限，可赋予的权限有CONNECT、RESOURCE、DBA，三种权限对数据库的访问权限依次递增。

5: 数据库角色的作用？
答：数据库角色(ROLE)可以结合GRANT、REVOKE语句进行角色创建、角色授权、对某些用户赋予(回收)角色。例如：CREATE ROLE R1；GRANT SELECT ON TABLE Student TO R1;GRANT/REVOKE R1 TO/FROM 李明；

6: MAC 适用于对数据有严格而固定密级分类的部分，例如：军事部门和政府。在MAC机制中，DBMS 被分为主体和客体，主体是客体的访问者和操纵者，主体是系统活动的实体，客体包括文件、基本表、索引、视图等。
MAC 模式下，每个主体会标记一个“许可证级别”，每个客体会标记一个“密级”(绝密、机密、可信、公开等)，只有主体的许可证级别 >= 客体的密级时才可读取相应的客体。只有主体的许可证级别 = 客体的密级时才可写相应的客体。

7: 可以通过视图机制达到一定的安全效果，例如：某个用户只能访问学生表的姓名和年龄，则可以只创建姓名和年龄的视图，并赋予 SELECT 权限给该用户，从而达到了保护源基本表的目的。

8: 审计功能可以把用户对数据库的所有操作记录下来放入审计日志中。DBA 可以利用审计日至追踪事件。例如：AUDIT/NOAUDIT SELECT UPDATE ON Student;对学生表的查询、更新操作进行审计(取消审计)。

9: 对于高度敏感性的数据(军事、财务、政府、国家机密等)还可以采用数据加密技术，采用替换(用密钥对每个字符加密)和置换(将数据按照不同的顺序排列)相结合的方法进行加密，该方法称为数据加密标准 DES(Data Encryption Standard)。

第五章  数据库完整性
1: 数据库完整性约束包含哪些？
答：实体完整性、参照完整性、用户定义完整性

2: (1)实体完整性在 CREATE TABLE 中的 PRIMARY KEY 中定义，插入和更新操作 DBMS 会自动检查主码是否唯一且非空；
(2)参照完整性在 CREATE TABLE 中的 FOREIGN KEY 中定义, 用 REFERENCES 短语指明这些外码参照哪些表的主码。当发生完整性不一致时，DBMS 采用拒绝(NO ACTION)、级连(CASCADE)或者置空(SET-NULL)操作。可以在 REFERENCES 语句后面显式地标明。
(3)用户定义完整性包含：UNIQUE、NOT NULL、CHECK短语。例：Ssex CHAR(2) CHECK(Ssex IN ('男','女') )，不满足用户定义完整性时 DBMS 不执行该语句。

3: 触发器时用户定义在关系表上的一类由事件驱动的特殊过程。一旦定义，任何用户对表的操作均由服务器自动激活相应的触发器，类似于约束，但是比约束更加灵活。由以下几个元素组成：1，触发器名；2，表名；3，触发事件(BEFORE/AFTER INSERT OR DELETE OR UPDATE等等)；4，触发器类型，FOR EACH ROW(行级触发器)，FOR EACH STATEMENT(语句级触发器)；5，触发条件；6，触发动作体

🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥

第六章  关系数据理论(难点)
1: 什么是数据库范式？
答：关系数据库中的关系是要满足一定要求的，满足不同程度的规范要求被称为不同的范式，满足最低要求的称为第一范式，在第一范式中满足进一步要求的为第二范式，各种范式呈递次规范，越高的范式数据库冗余越小。

2: 函数依赖定义：
答：设 R(U) 是属性集 U 上的关系模式，X，Y 是 U 的子集。若对于 R(U) 的任意一个可能的关系 r，r 中不可能存在两个元组 X 上的属性值相等，而在 Y 上的属性值不等，则称 X 函数确定 Y 或 Y 函数依赖于 X，记作 X －> Y 。依赖关系还可细分为 完全函数依赖、部分函数依赖、传递函数依赖。

3: 对于一个关系(二维表)，对它有一个最起码的要求：每一个分量都是不可再分的数据项。满足了这个条件的关系模式就属于第一范式(1NF)

4: 什么是第二范式？第二范式相比较于第一范式解决了什么问题？
答：若 R 属于 1NF，且每一个非主属性完全依赖于码，则称 R 属于 2NF。例如：
R：（Sno,Cno,Grade）有 (Sno,Cno) ->F Grade, 所以 R 属于 2NF
R：（Sno,Cno,Sdept,Grade）有 (Sno,Cno) ->P Sdept, 所以 R 不属于 2NF。因此可以采用投影分解把关系模式R分解成 (Sno,Sdept)和(Sno,Cno,Grade)
相比较于第一范式，第二范式消除了非主属性对码的部分依赖。

5: 什么是第三范式？第三范式相比较于第二范式解决了什么问题？
答：属于 3NF <=> 每一个非主属性既不部分依赖于码，也不传递依赖于码。
设有关系模式 R<U,F>：S－L(Sno,Sdept,SLoc)，其中主码为Sno。规定每个系的学生住在相同地址。
有 Sno ->F Sdept, Sno ->F SLoc, Sdept ->F SLoc 根据第一、二范式理论可以得出 R 属于 2NF。但是由 Sno->Sdept，Sdept 非-> Sno，Sdept -> SLoc，可得 Sno ->传递 SLoc 故 R 不属于 3NF。解决方案同样是将 S-L 分解成 S-D（Sno, Sdept）和 D-L（Sdept，SLoc）
相比较于第二范式，第三范式消除了非主属性对码的传递依赖。

6: BCNF 范式定义？BCNF 范式相比较于第三范式解决了什么问题？
答：在满足第三范式的基础上，满足所有的主属性对每一个不包含它的码，也是完全函数依赖。则属于 BCNF 范式
相比较于第三范式，BCNF 范式消除了主属性对码的部分和传递依赖。

7: 什么是多值依赖？
答：设 R(U) 是属性集 U 上的一个关系模式，X,Y,Z 是 U 的子集，并且 Z＝U－X－Y。
关系模式 R(U) 中多值依赖 X ->-> Y 成立 <=> 对 R(U) 上的任一关系 r，给定的一对 (x,z) 值，有一组 Y 的值，这组值仅仅决定于 x 值而与 z 值无关。
注：当 Z 为空时，称为平凡多值依赖。反之非平凡。
例如：一个课程 C 对应多个老师 T，每个老师使用多本教材 B。则 C ->-> T(非平凡) 且 C ->-> B(非平凡), 由此可见，多值依赖具有对称性。

8: 什么是第四范式？第四范式相比较于 BCNF 范式解决了什么问题？
答：设有关系模式 R<U,F> 属于 1NF，如果对于 R 的每个非平凡多值依赖 X ->-> Y(Y 不属于 X)，X 都含有码，则称 R 属于 4NF。
例：关系模式 WSC(W仓库、S保管员、C商品) 每个仓库有多个保管员，每个保管员保管仓库的所有商品。明显 WSC 的码为(W,S,C) All-Key, 而且 W ->-> S(非平凡) W ->-> C(非平凡), 所以 W 非 4NF。同样可以采用投影方式消除非平凡且非函数依赖的多值依赖。分解为 WS，WC。此时 W ->-> S,但这是平凡的多值依赖。WS 属于 4NF。WC 同理属于 4NF。
相比较于 BCNF 范式，第四范式消除了非平凡且非函数依赖的多值依赖。


第七章  数据库设计
1: 数据库设计的基本步骤：
（1）需求分析；（2）概念结构设计；（3）逻辑结构设计；（4）物理结构设计；（5）数据库实施；（6）数据库运行和维护；
注：必须强调设计过程中，数据库设计和应用程序设计的密切结合，并把它作为数据库设计的重要特点。即数据设计和处理设计相结合。

2: 需求分析的任务是什么？
答：任务是通过详细调查现实世界要处理的对象(组织、部门、企业等)，充分了解原系统工作概况，明确用户的各种需求，然后在此基础上确定新系统的功能。

3: 数据库概念结构设计的方法与步骤：自顶向下、自底向上、逐步扩张、混合策略


第八章  数据库编程
1: 嵌入式SQL(ESQL)的处理过程？
答：ESQL 是将 SQL 语句嵌入程序设计语言中，被嵌入的程序设计语言，如 C、C＋＋、Java 称为宿主语言。ESQL 一般采用预编译的方式，由 EDBMS 的预处理程序对源程序进行扫描，识别出 ESQL 语句，把它们转换成主语言调用语句，以使主语言编译程序能够识别它们。

2: 嵌入式 SQL 和主语言之间如何通信？
答：通过SQL通信区、主变量、指示变量进行，这些变量的说明必须在 BEGIN...END 之间进行。
注：在 SQL 语句中使用主变量需要在前面加上 : 冒号

3: 当查询、更新、删除等操作面临的是多条记录时，需要用到游标来逐一进行操作。
eg: EXEC SQL FETCH <游标名> INTO <主变量>, WHERE CURRENT OF <游标名>
反之如果结果只是单记录则不需要游标，使用 INTO 指定主变量即可。

4: 动态参数的嵌入式 SQL 的执行步骤？
答：声明 SQL 语句主变量，准备 SQL 语句(PREPARE)，执行准备好的语句(EXECUTE)。

5: ODBC 由四部分组成：用户应用程序(为用户提供界面、接口、应用逻辑等)、驱动程序管理器(用来管理各种驱动程序)、数据库驱动程序(应用程序操纵数据库的桥梁)、数据源(真实数据存放的地方)

6: 什么是句柄？ODBC有哪几种句柄？
答：句柄是一个32位的标识符类似于指针，用来唯一标示一个数据结构。ODBC 有环境句柄（当前全局性背景等）、连接句柄（实现与数据源的连接）、语句句柄（包含 SQL 语句和执行结果等信息）、描述符句柄（描述 SQL 的参数，结果集合）。

7: ODBC 的大致工作流程？
答：1，配置数据源。2，定义一些句柄用来初始化环境，并且定义必要的数据转换变量，为环境句柄绑定若干连接句柄。
3，建立连接 SQLConnect、SQLDriverConnect等API。4，分配语句句柄，方便输入输出
。5，执行SQL语句，SQLExexdirect、SQLPrepare、SQLExecute等API。6，结果处理。7，终止处理，释放句柄以及相关资源。


第九章  关系查询处理和优化
1: RDBMS 查询处理可以分成几个阶段？
答：查询分析、查询检查、查询优化、查询执行

2: 查询优化按照优化的层次一般分为代数优化和物理优化(常见的有存取路径优化)。

3: 代数优化中有哪些常见的代数表达等价变换规则？
答：1，连接、笛卡尔积交换律。2，连接、笛卡尔积结合律。3，投影的串接定律。4，选择的串接定律(选择条件可以合并)。5，选择与投影操作的交换律。6，选择对自然连接的分配律。应用上述一些代数变换优化 SQL 语句，进而实现查询的代数优化。

4: 查询优化中的代数优化有哪些启发式规则？
答：1，查询运算尽量先做，常常可使执行时节省几个数量级(最主要)。2，把投影运算和选择运算同时进行。3，把某些选择同它前面要执行的笛卡尔积结合起来成为一个连接运算。

5: 查询优化中的物理优化有哪些启发式规则？
答：1，对于选择条件时非主属性＝值或者在某个范围内，且选择列上有索引时，要估计查询结果的元组数目，如果比例较小(< 10%), 可以使用索引扫描，否则建议使用全表扫描。2，做嵌套循环查询时，选择循环次数较少的表作为外层循环。


第十章  数据库恢复技术
1: 事务的特性有哪些？
答：所谓事务是用户定义的一个数据库操作序列，这些操作要么全做要么全不做，是一个不可分割的工作单元。具有下面的特性：原子性(事务是数据库的逻辑工作单位，事务中包括的诸多操作要么都做，要么都不做)、一致性(执行结果只能使数据库变到另一个一致性状态)、隔离性(一个事务的执行不能被其他事务干扰)、持续性(事务一旦提交，对数据库的改变就是永久的)

2: 数据库故障分成哪几类？
答：事务内部故障(并发事务死锁、运算溢出、违反了某些完整性限制)、系统故障(操作系统出现故障需要重启，会影响所有正在运行的事务)、介质故障(硬件故障，几率小，但是最严重)、计算机病毒。

3: 数据库恢复有哪些技术手段？
答：数据转储＋登录日志文件。数据转储即 DBA 定期地将整个数据库复制到磁带或者另一个磁盘上保存起来。细分成静态转储和动态转储，静态转储在系统无事务时进行，期间不许数据库做更新操作。动态转储则允许任意时候做，并且可以和事务并发进行，但是为了保证转储后的副本数据库数据及时性，需要建立日志文件。
日志文件是用来记录事务对数据库更新操作的文件。日志文件会记录各个事务的开始结束以及相关操作(包括新值，旧值)。事务故障恢复和系统故障恢复、配合数据转储副本恢复数据都需要用到日志文件。

4: 登记日志文件必须遵循：1，登记的次序严格按照并发事务执行的时间次序、2，必须先写日志文件后写数据库。这两条原则。

5: 三种故障的数据库恢复策略
（1）事务故障：反向扫描日志文件，对该事务的更新操作执行逆操作，直到读到此事务的开始标记为止。
（2）系统故障：扫描日志文件，对于故障前已经执行完的事务做 REDO(重做) 操作，对未提交的事务做 UNDO(撤销) 操作。
（3）介质故障：需要重装数据库文件，将数据库文件副本装入，并且扫描日志文件，重做已完成的任务。

6: 数据库镜像的利与弊
答：当发生介质故障造成的严重损害时，需要使用数据库副本恢复数据库，为此 DBA 需要定期转储数据库副本，加重负担。镜像是指将数据库或关键数据复制到另一个磁盘上，随着主数据自动更新，即 DBMS 保证了镜像数据库和源数据库的数据一致性。当发生介质故障时，可由镜像磁盘继续提供使用，同时 DBMS 根据镜像数据库自动恢复源数据库。镜像数据库还可用于并发操作，即当一个用户正在对数据加排它锁修改数据时，可以读取镜像数据库上的数据，而不必等解锁。
由于镜像数据库需要复制，所以会降低运行效率，所以往往对关键数据和日志文件镜像。


第十一章  并发控制
1: 数据库并发分为交叉并发方式和同时并发方式，交叉并发方式用于单处理机系统，类似于分时系统的调度方式。同时并发方式用于多处理机系统，实现多个事务真正的并发运行。

2: 简述排它锁和共享锁
答：排它锁（X锁）又称为写锁，若事务 T 对数据对象 A 加上 X 锁，则只允许 T 读取和修改 A，其他任何事物都不能再对 A 加任何的锁，直到 T 释放 A 上的锁。
共享锁（S锁）又称为读锁，其他事务可以读但是不能写，其他事务可以继续加 S 锁但是不能加 X 锁。

3: 数据库死锁情形？以及如何解除死锁？
答：两个事务各自封锁一个数据，又相互请求数据则会造成死锁，类似于操作系统进程死锁。解决方法是选择一个处理死锁代价最小的事务，将其撤销，然后释放此事务持有的锁，使其他事务可以执行下去，当然最后还要恢复该事务的操作。

4: DBMS 对并发事务的调度可能会对结果产生不同的影响，有些甚至导致死锁。串行调度是正确的。即事务并行执行的结果与按照某个串行次序执行结果一致，则称为可串行化调度。























